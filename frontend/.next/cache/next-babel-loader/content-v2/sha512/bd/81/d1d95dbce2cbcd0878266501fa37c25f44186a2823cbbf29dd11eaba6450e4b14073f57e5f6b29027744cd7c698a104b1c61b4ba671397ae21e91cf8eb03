{"ast":null,"code":"import withApollo from 'next-with-apollo';\nimport { endpoint } from '../config';\nimport { ApolloClient, ApolloLink, InMemoryCache } from '@apollo/client';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { getDataFromTree } from '@apollo/client/react/ssr';\nimport { onError } from '@apollo/link-error';\nimport paginationField from './paginationField';\n\nfunction createClient(_ref) {\n  var initialState = _ref.initialState,\n      headers = _ref.headers;\n  return new ApolloClient({\n    connectToDevTools: true,\n    link: ApolloLink.from([onError(function (_ref2) {\n      var graphQLErrors = _ref2.graphQLErrors,\n          networkError = _ref2.networkError;\n      if (graphQLErrors) graphQLErrors.map(function (_ref3) {\n        var message = _ref3.message,\n            locations = _ref3.locations,\n            path = _ref3.path;\n        return console.log(\"[GraphQL error]: Message: \".concat(message, \", Location: \").concat(locations, \", Path: \").concat(path));\n      });\n      if (networkError) console.log(\"[Network error]: \".concat(networkError));\n    }), createUploadLink({\n      uri: true ? endpoint : endpoint,\n      fetchOptions: {\n        credentials: 'include'\n      },\n      headers: headers\n    })]),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allProducts: paginationField()\n          }\n        }\n      }\n    }).restore(initialState || {})\n  });\n}\n\nexport default withApollo(createClient, {\n  getDataFromTree: getDataFromTree\n});","map":{"version":3,"sources":["/Users/andreasfricktoresand/Documents/frontend/Examensarbete/sell-stuff/frontend/lib/withData.js"],"names":["withApollo","endpoint","ApolloClient","ApolloLink","InMemoryCache","createUploadLink","getDataFromTree","onError","paginationField","createClient","initialState","headers","connectToDevTools","link","from","graphQLErrors","networkError","map","message","locations","path","console","log","uri","fetchOptions","credentials","cache","typePolicies","Query","fields","allProducts","restore"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,SAAQC,QAAR,QAAuB,WAAvB;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,aAAnC,QAAwD,gBAAxD;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,SAASC,YAAT,OAAgD;AAAA,MAAxBC,YAAwB,QAAxBA,YAAwB;AAAA,MAAVC,OAAU,QAAVA,OAAU;AAC5C,SAAO,IAAIT,YAAJ,CAAiB;AAACU,IAAAA,iBAAiB,EAAE,IAApB;AACXC,IAAAA,IAAI,EAAEV,UAAU,CAACW,IAAX,CAAgB,CAChBP,OAAO,CAAC,iBAAqC;AAAA,UAAlCQ,aAAkC,SAAlCA,aAAkC;AAAA,UAAnBC,YAAmB,SAAnBA,YAAmB;AAClE,UAAID,aAAJ,EACCA,aAAa,CAACE,GAAd,CAAkB;AAAA,YAAGC,OAAH,SAAGA,OAAH;AAAA,YAAYC,SAAZ,SAAYA,SAAZ;AAAA,YAAuBC,IAAvB,SAAuBA,IAAvB;AAAA,eACnBC,OAAO,CAACC,GAAR,qCAC+BJ,OAD/B,yBACqDC,SADrD,qBACyEC,IADzE,EADmB;AAAA,OAAlB;AAIH,UAAIJ,YAAJ,EACAK,OAAO,CAACC,GAAR,4BAAgCN,YAAhC;AACC,KAR6B,CADS,EAUvCX,gBAAgB,CAAC;AACfkB,MAAAA,GAAG,EAAE,OAAyCtB,QAAzC,GAAoDA,QAD1C;AAEduB,MAAAA,YAAY,EAAE;AACPC,QAAAA,WAAW,EAAE;AADN,OAFA;AAKTd,MAAAA,OAAO,EAAPA;AALS,KAAD,CAVuB,CAAhB,CADK;AAmBtBe,IAAAA,KAAK,EAAE,IAAItB,aAAJ,CAAkB;AACvBuB,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE;AACNC,YAAAA,WAAW,EAAEtB,eAAe;AADtB;AADH;AADK;AADS,KAAlB,EASVuB,OATU,CASFrB,YAAY,IAAI,EATd;AAnBe,GAAjB,CAAP;AA6BA;;AACJ,eAAeV,UAAU,CAACS,YAAD,EAAe;AAACH,EAAAA,eAAe,EAAfA;AAAD,CAAf,CAAzB","sourcesContent":["import withApollo from 'next-with-apollo';\nimport {endpoint} from '../config'\nimport { ApolloClient, ApolloLink, InMemoryCache } from '@apollo/client';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { getDataFromTree } from '@apollo/client/react/ssr'\nimport { onError } from '@apollo/link-error';\nimport paginationField from './paginationField';\n\nfunction createClient({ initialState, headers }){\n    return new ApolloClient({connectToDevTools: true,\n                 link: ApolloLink.from([\n                       onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n   graphQLErrors.map(({ message, locations, path }) => \n  console.log(\n    `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`)\n    );\nif (networkError) \nconsole.log(`[Network error]: ${networkError}`);\n}),\ncreateUploadLink({\n  uri: process.env.NODE_ENV === 'development' ? endpoint : endpoint,\n   fetchOptions: {\n          credentials: 'include',\n        },\n        headers,\n      })\n]),\n      cache: new InMemoryCache({\n        typePolicies: {\n          Query: {\n            fields: {\n              allProducts: paginationField(),\n        \n      }\n    }\n  }\n}).restore(initialState || {})\n}) }\nexport default withApollo(createClient, {getDataFromTree})\n"]},"metadata":{},"sourceType":"module"}